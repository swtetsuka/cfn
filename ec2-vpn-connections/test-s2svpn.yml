AWSTemplateFormatVersion: 2010-09-09
Description: "Testing environment for AWS Site-to-Site VPN with Cisco CSR 1000V"
Parameters:
  Prefix:
    Type: String
    Default: test-s2svpn
    Description: Prefix Name
  TestMyClientIp:
    Type: String
    Default: 192.168.0.29/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Description: SSH Client CIDR (e.g. curl http://checkip.amazonaws.com)
  TestMyKeyPairName:
    Type: String
    Default: TestMyKeyPair
    Description: Key Pair name
Mappings:
  RegionMap:
    us-east-1:
      Al2Ami: ami-0d1a4d53e40abecc4
      Csr1kvByolAmi: ami-067c66abd840abc24
      Al2Instance: t4g.nano
    ap-northeast-1:
      Al2Ami: ami-0fd9d20498f0f18a6
      Csr1kvByolAmi: ami-005bc6f5bdcfe90b9
      Al2Instance: t4g.nano
    ap-northeast-3:
      Al2Ami: ami-0d9649ef6deb663a7
      Csr1kvByolAmi: ami-0c7cd330519954697
      Al2Instance: t3.nano
Resources:
  #### VPC ####
  TestMyVpc000:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.0.0.0/16
      Tags: 
        - Key: Name
          Value: !Sub "vpc-${Prefix}-000"
  TestMyVpc001:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: 10.1.0.0/16
      Tags: 
        - Key: Name
          Value: !Sub "vpc-${Prefix}-001"

  #### Gateway ####
  TestMyIgw000:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "igw-${Prefix}-000"
  TestMyIgw001:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "igw-${Prefix}-001"
  TestMyVgw000:
    Type: AWS::EC2::VPNGateway
    Properties: 
      Tags: 
      - Key: Name
        Value: !Sub "vgw-${Prefix}-000"
      Type: ipsec.1

  TestMyVpcGwAttach000:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TestMyVpc000
      InternetGatewayId: !Ref TestMyIgw000
  TestMyVpcGwAttach001:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TestMyVpc001
      InternetGatewayId: !Ref TestMyIgw001
  TestMyVpcGwAttach002:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      VpcId: !Ref TestMyVpc000
      VpnGatewayId: !Ref TestMyVgw000

  #### Subnet ####
  TestMySubnet000:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref TestMyVpc000
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.0.0.0/24
      Tags: 
        - Key: Name
          Value: !Sub "subnet-${Prefix}-000"
  TestMySubnet001:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref TestMyVpc001
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.1.0.0/24
      Tags:
      - Key: Name
        Value: !Sub "subnet-${Prefix}-001"

  #### Route Table ####
  TestMyRtb000:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
      - Key: Name
        Value: !Sub "rtb-${Prefix}-000"
      VpcId: !Ref TestMyVpc000
  TestMyRtb001:
    Type: AWS::EC2::RouteTable
    Properties: 
      Tags: 
      - Key: Name
        Value: !Sub "rtb-${Prefix}-001"
      VpcId: !Ref TestMyVpc001

  TestMyRtbAssoc000:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref TestMyRtb000
      SubnetId: !Ref TestMySubnet000
  TestMyRtbAssoc001:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref TestMyRtb001
      SubnetId: !Ref TestMySubnet001

  TestMyRoute000:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref TestMyIgw000
      RouteTableId: !Ref TestMyRtb000
  TestMyRoute001:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 10.1.0.0/16
      GatewayId: !Ref TestMyVgw000
      RouteTableId: !Ref TestMyRtb000
  TestMyRoute002:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref TestMyIgw001
      RouteTableId: !Ref TestMyRtb001

  #### Security Group ####
  TestMySg000:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for EC2
      GroupName: !Sub "sg_${Prefix}_000"
      VpcId: !Ref TestMyVpc000
      Tags:
      - Key: Name
        Value: !Sub "sg-${Prefix}-000"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref TestMyClientIp
        Description: Allow ssh from your remote terminal
      - IpProtocol: -1
        CidrIp: 10.1.0.0/16
        Description: Allow any via Site-to-Site VPN 
  TestMySg001:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: for CGW
      GroupName: !Sub "sg_${Prefix}_001"
      VpcId: !Ref TestMyVpc001
      Tags:
      - Key: Name
        Value: !Sub "sg-${Prefix}-001"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref TestMyClientIp
        Description: Allow ssh
      - IpProtocol: -1
        CidrIp: 10.0.0.0/8
        Description: Allow private

  #### EC2 ####
  TestMyEcc000:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CreditSpecification:
        CPUCredits: standard
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Al2Ami]
      InstanceType: !FindInMap [RegionMap, !Ref "AWS::Region", Al2Instance]
      KeyName: !Ref TestMyKeyPairName
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeType: standard
          VolumeSize: 8
          DeleteOnTermination: true
      PrivateIpAddress: 10.0.0.10
      SecurityGroupIds:
      - !Ref TestMySg000
      SubnetId: !Ref TestMySubnet000
      Tags: 
      - Key: Name
        Value: !Sub "sv-${Prefix}"
  TestMyEcc0001:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone:
        Fn::Select: 
          - 0
          - Fn::GetAZs: ""
      CreditSpecification:
        CPUCredits: standard
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Csr1kvByolAmi]
      InstanceType: t3.medium
      KeyName: !Ref TestMyKeyPairName
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs: 
          VolumeType: standard
          VolumeSize: 8
          DeleteOnTermination: true
      PrivateIpAddress: 10.1.0.10
      SecurityGroupIds:
      - !Ref TestMySg001
      SourceDestCheck: false
      SubnetId: !Ref TestMySubnet001
      Tags: 
      - Key: Name
        Value: !Sub "cgw-${Prefix}"

  #### Elastic IP ####
  TestMyEip000:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref TestMyEcc000
      Tags: 
      - Key: Name
        Value: !Sub "sv-${Prefix}"
  TestMyEip001:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref TestMyEcc0001
      Tags: 
      - Key: Name
        Value: !Sub "cgw-${Prefix}"

  #### Customer Gateway ####
  TestMyCgw000:
    Type: AWS::EC2::CustomerGateway
    Properties: 
      BgpAsn: 65000
      IpAddress: !Ref TestMyEip001
      Tags:
      - Key: Name
        Value: !Sub "cgw-${Prefix}"
      Type: ipsec.1

  #### VPN Connection ####
  TestMyVpn001:
    Type: AWS::EC2::VPNConnection
    Properties: 
      CustomerGatewayId: !Ref TestMyCgw000
      StaticRoutesOnly: false
      Tags: 
      - Key: Name
        Value: !Sub "vpn-${Prefix}"
      Type: ipsec.1
      VpnGatewayId: !Ref TestMyVgw000
